<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="bar__graph_8h" kind="file" language="C++">
    <compoundname>bar_graph.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">driver/gpio.h</includes>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">esp_err.h</includes>
    <includes refid="pin__defs_8h" local="yes">pin_defs.h</includes>
    <includes refid="motor__driver_8h" local="yes">motor_driver.h</includes>
    <includedby refid="sra__board_8h" local="yes">include/sra_board.h</includedby>
    <includedby refid="bar__graph_8c" local="yes">src/bar_graph.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>driver/gpio.h</label>
      </node>
      <node id="4">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>esp_attr.h</label>
      </node>
      <node id="7">
        <label>esp_err.h</label>
      </node>
      <node id="12">
        <label>soc/mcpwm_periph.h</label>
      </node>
      <node id="6">
        <label>esp_log.h</label>
      </node>
      <node id="8">
        <label>pin_defs.h</label>
        <link refid="pin__defs_8h"/>
      </node>
      <node id="9">
        <label>motor_driver.h</label>
        <link refid="motor__driver_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bar_graph.h</label>
        <link refid="bar__graph_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>driver/mcpwm.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/sra_board.h</label>
        <link refid="sra__board_8h"/>
      </node>
      <node id="3">
        <label>src/bar_graph.c</label>
        <link refid="bar__graph_8c"/>
      </node>
      <node id="1">
        <label>include/bar_graph.h</label>
        <link refid="bar__graph_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bar__graph_8h_1ab10cdc6b54d4e647335eebb25dabd2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t enable_bar_graph</definition>
        <argsstring>()</argsstring>
        <name>enable_bar_graph</name>
        <briefdescription>
<para>enables the bar graph led&apos;s gpio pins </para>
        </briefdescription>
        <detaileddescription>
<para>It will check for state of motor driver A and B, and accordingly init the free gpios.</para>
<para><hruler/>
 <table rows="10" cols="3"><row>
<entry thead="yes"><para>Motor Driver A </para>
</entry><entry thead="yes"><para>Motor Driver B </para>
</entry><entry thead="yes"><para>Mode  </para>
</entry></row>
<row>
<entry thead="no"><para>off </para>
</entry><entry thead="no"><para>off </para>
</entry><entry thead="no"><para>1  </para>
</entry></row>
<row>
<entry thead="no"><para>off </para>
</entry><entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>2  </para>
</entry></row>
<row>
<entry thead="no"><para>off </para>
</entry><entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>3  </para>
</entry></row>
<row>
<entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>off </para>
</entry><entry thead="no"><para>4  </para>
</entry></row>
<row>
<entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>5  </para>
</entry></row>
<row>
<entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>6  </para>
</entry></row>
<row>
<entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>off </para>
</entry><entry thead="no"><para>7  </para>
</entry></row>
<row>
<entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>parallel </para>
</entry><entry thead="no"><para>8  </para>
</entry></row>
<row>
<entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>normal </para>
</entry><entry thead="no"><para>0  </para>
</entry></row>
</table>
</para>
<para>enabled_bar_graph_flag is set to the value of Mode accordingly.</para>
<para><simplesect kind="return"><para>esp_err_t returns ESP_OK if enabled correctly, and ESP_FAIL if it failed to initialise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bar_graph.h" line="35" column="11" bodyfile="src/bar_graph.c" bodystart="16" bodyend="101" declfile="include/bar_graph.h" declline="35" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="bar__graph_8h_1ae3c6552600f6d84335edd8bb6095fe3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t set_bar_graph</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>set_bar_graph</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the value of bar graph LED. </para>
        </briefdescription>
        <detaileddescription>
<para>The exact working of this is a bit hard to understand, so this is example. Below are the given states of motor drivers</para>
<para>Motor Driver A: Normal Motor Driver B: Off Mode = 7, so for mode = 7, mask = bitmask[7] = 0x0F = 00001111 data = 0xAA = 10101010</para>
<para>Since, motor driver A is in normal mode and motor driver B is off, we can only use IN5 - IN8 pins of the bar graph LED</para>
<para><programlisting><codeline><highlight class="normal">LED1<sp/>&lt;-----&gt;<sp/>Motor<sp/>Driver<sp/>A<sp/>(IN1)<sp/>-----<sp/>0<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED2<sp/>&lt;-----&gt;<sp/>Motor<sp/>Driver<sp/>A<sp/>(IN2)<sp/>-----<sp/>0<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED3<sp/>&lt;-----&gt;<sp/>Motor<sp/>Driver<sp/>A<sp/>(IN3)<sp/>-----<sp/>0<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED4<sp/>&lt;-----&gt;<sp/>Motor<sp/>Driver<sp/>A<sp/>(IN4)<sp/>-----<sp/>0<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED5<sp/>&lt;--X--&gt;<sp/>Motor<sp/>Driver<sp/>B<sp/>(IN5)<sp/>-----<sp/>1<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED6<sp/>&lt;--X--&gt;<sp/>Motor<sp/>Driver<sp/>B<sp/>(IN6)<sp/>-----<sp/>1<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED7<sp/>&lt;--X--&gt;<sp/>Motor<sp/>Driver<sp/>B<sp/>(IN7)<sp/>-----<sp/>1<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">LED8<sp/>&lt;--X--&gt;<sp/>Motor<sp/>Driver<sp/>B<sp/>(IN8)<sp/>-----<sp/>1<sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting></para>
<para>Mask ==&gt; 00001111 =&gt; 0x0F</para>
<para>Now, if data is 10101010, then even though pins IN1-IN4 are being used by motor driver, it will be set by gpio_set_level, which will crash the esp32 device. So, we check in the bitmask if the following pin is free or not, if bit is 1, it can be used, if it is 0, then it can&apos;t be used.</para>
<para>So, to achieve this we bitwise-and the mask with 0x80(10000000), if result is 0x80, then leftmost bit is 1, else it is 0. If leftmost bit is 1, means we can use this pin of bar graph, then we do the same thing with data, bitwise-and it with 0x80, to find the leftmost bit, if it is 1, the pin is set to 1, else 0. Now we left shift the data and mask variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>8bit binary in hexadecimal form, i.e, the pattern that is needed to be shown on the bar graph LED </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t returns ESP_OK </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bar_graph.h" line="74" column="11" bodyfile="src/bar_graph.c" bodystart="103" bodyend="136" declfile="include/bar_graph.h" declline="74" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="bar__graph_8h_1aedf9bcb0b39fed044eb70e63fc74c496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t bool_to_uint8</definition>
        <argsstring>(bool *input_array)</argsstring>
        <name>bool_to_uint8</name>
        <param>
          <type>bool *</type>
          <declname>input_array</declname>
        </param>
        <briefdescription>
<para>converts a boolean array of size 8 into 8-bit unsigned integer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_array</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean input array of size 8 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t returns a 8 bit number formed after combining the boolean array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bar_graph.h" line="82" column="9" bodyfile="src/bar_graph.c" bodystart="138" bodyend="141" declfile="include/bar_graph.h" declline="82" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>BAR_GRAPH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BAR_GRAPH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_err.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pin__defs_8h" kindref="compound">pin_defs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor__driver_8h" kindref="compound">motor_driver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">esp_err_t<sp/><ref refid="bar__graph_8h_1ab10cdc6b54d4e647335eebb25dabd2f7" kindref="member">enable_bar_graph</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">esp_err_t<sp/><ref refid="bar__graph_8h_1ae3c6552600f6d84335edd8bb6095fe3a" kindref="member">set_bar_graph</ref>(uint8_t<sp/>data);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">uint8_t<sp/><ref refid="bar__graph_8h_1aedf9bcb0b39fed044eb70e63fc74c496" kindref="member">bool_to_uint8</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*input_array);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/bar_graph.h"/>
  </compounddef>
</doxygen>
