<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="i2cdev_8c" kind="file" language="C++">
    <compoundname>i2cdev.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">freertos/FreeRTOS.h</includes>
    <includes local="no">freertos/task.h</includes>
    <includes local="no">esp_log.h</includes>
    <includes refid="i2cdev_8h" local="yes">i2cdev.h</includes>
    <incdepgraph>
      <node id="10">
        <label>esp_idf_lib_helpers.h</label>
        <link refid="esp__idf__lib__helpers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>i2cdev.h</label>
        <link refid="i2cdev_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/i2cdev.c</label>
        <link refid="i2cdev_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>driver/i2c.h</label>
      </node>
      <node id="9">
        <label>esp_err.h</label>
      </node>
      <node id="11">
        <label>esp_idf_version.h</label>
      </node>
      <node id="5">
        <label>esp_log.h</label>
      </node>
      <node id="3">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="8">
        <label>freertos/semphr.h</label>
      </node>
      <node id="4">
        <label>freertos/task.h</label>
      </node>
      <node id="12">
        <label>soc/i2c_reg.h</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structi2c__port__state__t" prot="public">i2c_port_state_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="i2cdev_8c_1a423c4afe004688f73eebf7426cbfb9eb" prot="public" static="no">
        <name>SEMAPHORE_TAKE</name>
        <param><defname>port</defname></param>
        <initializer>        do { \
        if (!xSemaphoreTake(states[port].lock, pdMS_TO_TICKS(CONFIG_I2CDEV_TIMEOUT))) \
        { \
            ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>, &quot;Could not take port <ref refid="group__i2cdev_1gafc659d089f5608a17e8650e59a7e26fc" kindref="member">mutex</ref> %d&quot;, port); \
            return ESP_ERR_TIMEOUT; \
        } \
        } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="53" column="10" bodyfile="src/i2cdev.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="i2cdev_8c_1a28a94ff9b7ccdbfec8e18e66ba103c16" prot="public" static="no">
        <name>SEMAPHORE_GIVE</name>
        <param><defname>port</defname></param>
        <initializer>        do { \
        if (!xSemaphoreGive(states[port].lock)) \
        { \
            ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>, &quot;Could not give port <ref refid="group__i2cdev_1gafc659d089f5608a17e8650e59a7e26fc" kindref="member">mutex</ref> %d&quot;, port); \
            return ESP_FAIL; \
        } \
        } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="65" column="10" bodyfile="src/i2cdev.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="i2cdev_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;i2cdev&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="39" column="19" bodyfile="src/i2cdev.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2cdev_8c_1aa01f1f0b40d091b1369e72052b401901" prot="public" static="yes" mutable="no">
        <type>i2c_port_state_t</type>
        <definition>i2c_port_state_t states[I2C_NUM_MAX]</definition>
        <argsstring>[I2C_NUM_MAX]</argsstring>
        <name>states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="47" column="25" bodyfile="src/i2cdev.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2cdev_8c_1ac1ab3a177117fc701db300be817034e4" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool i2c_initialised</definition>
        <argsstring></argsstring>
        <name>i2c_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="48" column="13" bodyfile="src/i2cdev.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__i2cdev_1ga8a96ea2cf13f4b50a9f5d5e17f40e01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2cdev_init</definition>
        <argsstring>()</argsstring>
        <name>i2cdev_init</name>
        <briefdescription>
<para>Init library. </para>
        </briefdescription>
        <detaileddescription>
<para>The function must be called before any other functions of this library.</para>
<para><simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="74" column="11" bodyfile="src/i2cdev.c" bodystart="74" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga320d9f51aab144397f75448801aa85e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2cdev_done</definition>
        <argsstring>()</argsstring>
        <name>i2cdev_done</name>
        <briefdescription>
<para>Finish work with library. </para>
        </briefdescription>
        <detaileddescription>
<para>Uninstall i2c drivers.</para>
<para><simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="97" column="11" bodyfile="src/i2cdev.c" bodystart="97" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga1c3a8d47ff8f1c985d6e1d98d668eb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_create_mutex</definition>
        <argsstring>(i2c_dev_t *dev)</argsstring>
        <name>i2c_dev_create_mutex</name>
        <param>
          <type><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Create mutex for device descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does nothing if option CONFIG_I2CDEV_NOLOCK is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="118" column="11" bodyfile="src/i2cdev.c" bodystart="118" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga1e9101fef8e50349d63157e0e01ced0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_delete_mutex</definition>
        <argsstring>(i2c_dev_t *dev)</argsstring>
        <name>i2c_dev_delete_mutex</name>
        <param>
          <type><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Delete mutex for device descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does nothing if option CONFIG_I2CDEV_NOLOCK is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="136" column="11" bodyfile="src/i2cdev.c" bodystart="136" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1gab0a314a2a3c6a8c7f9e59cf3b69466da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_take_mutex</definition>
        <argsstring>(i2c_dev_t *dev)</argsstring>
        <name>i2c_dev_take_mutex</name>
        <param>
          <type><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Take device mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does nothing if option CONFIG_I2CDEV_NOLOCK is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="148" column="11" bodyfile="src/i2cdev.c" bodystart="148" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga51961c290ebed5993c50e30009c40e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_give_mutex</definition>
        <argsstring>(i2c_dev_t *dev)</argsstring>
        <name>i2c_dev_give_mutex</name>
        <param>
          <type><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Give device mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does nothing if option CONFIG_I2CDEV_NOLOCK is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="164" column="11" bodyfile="src/i2cdev.c" bodystart="164" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="i2cdev_8c_1accdfe988e64b1dffe901311f4b29ef21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool cfg_equal</definition>
        <argsstring>(const i2c_config_t *a, const i2c_config_t *b)</argsstring>
        <name>cfg_equal</name>
        <param>
          <type>const i2c_config_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const i2c_config_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="180" column="20" bodyfile="src/i2cdev.c" bodystart="180" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="i2cdev_8c_1a0bccfd5a864d6d9d7197794c35b2c08c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t i2c_setup_port</definition>
        <argsstring>(const i2c_dev_t *dev)</argsstring>
        <name>i2c_setup_port</name>
        <param>
          <type>const <ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="193" column="18" bodyfile="src/i2cdev.c" bodystart="193" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga9785ee992dab84bea0d7be83bb6e17fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_read</definition>
        <argsstring>(const i2c_dev_t *dev, const void *out_data, size_t out_size, void *in_data, size_t in_size)</argsstring>
        <name>i2c_dev_read</name>
        <param>
          <type>const <ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
<para>Read from slave device. </para>
        </briefdescription>
        <detaileddescription>
<para>Issue a send operation of <computeroutput>out_data</computeroutput> register address, followed by reading <computeroutput>in_size</computeroutput> bytes from slave into <computeroutput>in_data</computeroutput> . Function is thread-safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to send if non-null </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">in_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of byte to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="241" column="11" bodyfile="src/i2cdev.c" bodystart="241" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1ga22856483acc1f539d29e07876fc0418a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_write</definition>
        <argsstring>(const i2c_dev_t *dev, const void *out_reg, size_t out_reg_size, const void *out_data, size_t out_size)</argsstring>
        <name>i2c_dev_write</name>
        <param>
          <type>const <ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>out_reg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_reg_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Write to slave device. </para>
        </briefdescription>
        <detaileddescription>
<para>Write <computeroutput>out_size</computeroutput> bytes from <computeroutput>out_data</computeroutput> to slave into <computeroutput>out_reg</computeroutput> register address. Function is thread-safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to register address to send if non-null </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_reg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="273" column="11" bodyfile="src/i2cdev.c" bodystart="273" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1gae8b4a6110cdc2d2e47b2214285ce59fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_read_reg</definition>
        <argsstring>(const i2c_dev_t *dev, uint8_t reg, void *in_data, size_t in_size)</argsstring>
        <name>i2c_dev_read_reg</name>
        <param>
          <type>const <ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
<para>Read from register with an 8-bit address. </para>
        </briefdescription>
        <detaileddescription>
<para>Shortcut to <ref refid="group__i2cdev_1ga9785ee992dab84bea0d7be83bb6e17fc" kindref="member">i2c_dev_read()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">in_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of byte to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="299" column="11" bodyfile="src/i2cdev.c" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__i2cdev_1gad9827abf64603201a084148c0de097ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t i2c_dev_write_reg</definition>
        <argsstring>(const i2c_dev_t *dev, uint8_t reg, const void *out_data, size_t out_size)</argsstring>
        <name>i2c_dev_write_reg</name>
        <param>
          <type>const <ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Write to register with an 8-bit address. </para>
        </briefdescription>
        <detaileddescription>
<para>Shortcut to <ref refid="group__i2cdev_1ga22856483acc1f539d29e07876fc0418a" kindref="member">i2c_dev_write()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/i2cdev.c" line="305" column="11" bodyfile="src/i2cdev.c" bodystart="305" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ESP-IDF I2C master thread-safe functions for communication with I2C slave</para>
<para>Copyright (c) 2018 Ruslan V. Uss <ulink url="mailto:unclerus@gmail.com">unclerus@gmail.com</ulink></para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Ruslan<sp/>V.<sp/>Uss<sp/>&lt;unclerus@gmail.com&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/FreeRTOS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2cdev_8h" kindref="compound">i2cdev.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;i2cdev&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>SemaphoreHandle_t<sp/>lock;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_config_t<sp/>config;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>installed;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/>i2c_port_state_t;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>i2c_port_state_t<sp/>states[I2C_NUM_MAX];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i2c_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_TAKE(port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_TAKE(port)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!xSemaphoreTake(states[port].lock,<sp/>pdMS_TO_TICKS(CONFIG_I2CDEV_TIMEOUT)))<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/>&quot;Could<sp/>not<sp/>take<sp/>port<sp/>mutex<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>port);<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ESP_ERR_TIMEOUT;<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_GIVE(port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_GIVE(port)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!xSemaphoreGive(states[port].lock))<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/>&quot;Could<sp/>not<sp/>give<sp/>port<sp/>mutex<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>port);<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ESP_FAIL;<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga8a96ea2cf13f4b50a9f5d5e17f40e01b" kindref="member">i2cdev_init</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!i2c_initialised)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(states,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(states));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>I2C_NUM_MAX;<sp/>i++)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states[i].lock<sp/>=<sp/>xSemaphoreCreateMutex();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!states[i].lock)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>port<sp/>mutex<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_FAIL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga320d9f51aab144397f75448801aa85e4" kindref="member">i2cdev_done</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>I2C_NUM_MAX;<sp/>i++)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!states[i].lock)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(states[i].installed)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a423c4afe004688f73eebf7426cbfb9eb" kindref="member">SEMAPHORE_TAKE</ref>(i);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_driver_delete(i);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states[i].installed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a28a94ff9b7ccdbfec8e18e66ba103c16" kindref="member">SEMAPHORE_GIVE</ref>(i);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vSemaphoreDelete(states[i].lock);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states[i].lock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga1c3a8d47ff8f1c985d6e1d98d668eb3d" kindref="member">i2c_dev_create_mutex</ref>(<ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGV(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>creating<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev__t_1afb073a307ab7fb8817fb967107a958cd" kindref="member">mutex</ref><sp/>=<sp/>xSemaphoreCreateMutex();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev-&gt;<ref refid="structi2c__dev__t_1afb073a307ab7fb8817fb967107a958cd" kindref="member">mutex</ref>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>Could<sp/>not<sp/>create<sp/>device<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_FAIL;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga1e9101fef8e50349d63157e0e01ced0f" kindref="member">i2c_dev_delete_mutex</ref>(<ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGV(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>deleting<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(dev-&gt;<ref refid="structi2c__dev__t_1afb073a307ab7fb8817fb967107a958cd" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1gab0a314a2a3c6a8c7f9e59cf3b69466da" kindref="member">i2c_dev_take_mutex</ref>(<ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGV(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>taking<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xSemaphoreTake(dev-&gt;<ref refid="structi2c__dev__t_1afb073a307ab7fb8817fb967107a958cd" kindref="member">mutex</ref>,<sp/>pdMS_TO_TICKS(CONFIG_I2CDEV_TIMEOUT)))</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>Could<sp/>not<sp/>take<sp/>device<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_TIMEOUT;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga51961c290ebed5993c50e30009c40e75" kindref="member">i2c_dev_give_mutex</ref>(<ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CONFIG_I2CDEV_NOLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGV(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>giving<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xSemaphoreGive(dev-&gt;<ref refid="structi2c__dev__t_1afb073a307ab7fb8817fb967107a958cd" kindref="member">mutex</ref>))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[0x%02x<sp/>at<sp/>%d]<sp/>Could<sp/>not<sp/>give<sp/>device<sp/>mutex&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_FAIL;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cfg_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i2c_config_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i2c_config_t<sp/>*b)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;scl_io_num<sp/>==<sp/>b-&gt;scl_io_num</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>a-&gt;sda_io_num<sp/>==<sp/>b-&gt;sda_io_num</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HELPER_TARGET_IS_ESP32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>a-&gt;master.clk_speed<sp/>==<sp/>b-&gt;master.clk_speed</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>HELPER_TARGET_IS_ESP8266</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>a-&gt;clk_stretch_tick<sp/>==<sp/>b-&gt;clk_stretch_tick</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>a-&gt;scl_pullup_en<sp/>==<sp/>b-&gt;scl_pullup_en</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>a-&gt;sda_pullup_en<sp/>==<sp/>b-&gt;sda_pullup_en;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>esp_err_t<sp/>i2c_setup_port(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref><sp/>&gt;=<sp/>I2C_NUM_MAX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cfg_equal(&amp;dev-&gt;<ref refid="structi2c__dev__t_1ab070791328671f783f9d6d45af3c4c24" kindref="member">cfg</ref>,<sp/>&amp;states[dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>].config))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Reconfiguring<sp/>I2C<sp/>driver<sp/>on<sp/>port<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_config_t<sp/>temp;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;temp,<sp/>&amp;dev-&gt;<ref refid="structi2c__dev__t_1ab070791328671f783f9d6d45af3c4c24" kindref="member">cfg</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(i2c_config_t));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.mode<sp/>=<sp/>I2C_MODE_MASTER;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Driver<sp/>reinstallation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(states[dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>].installed)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_driver_delete(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HELPER_TARGET_IS_ESP32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((res<sp/>=<sp/>i2c_param_config(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>&amp;temp))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((res<sp/>=<sp/>i2c_driver_install(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>temp.mode,<sp/>0,<sp/>0,<sp/>0))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HELPER_TARGET_IS_ESP8266</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clock<sp/>Stretch<sp/>time,<sp/>depending<sp/>on<sp/>CPU<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.clk_stretch_tick<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref><sp/>?<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref><sp/>:<sp/><ref refid="group__i2cdev_1gae91711762e6cea5ce9f67a93b3dd3e59" kindref="member">I2CDEV_MAX_STRETCH_TIME</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((res<sp/>=<sp/>i2c_driver_install(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>temp.mode))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((res<sp/>=<sp/>i2c_param_config(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>&amp;temp))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states[dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>].installed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;states[dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>].config,<sp/>&amp;temp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(i2c_config_t));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>driver<sp/>successfully<sp/>reconfigured<sp/>on<sp/>port<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HELPER_TARGET_IS_ESP32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((res<sp/>=<sp/>i2c_get_timeout(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>&amp;t))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timeout<sp/>cannot<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref><sp/>?<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref><sp/>:<sp/><ref refid="group__i2cdev_1gae91711762e6cea5ce9f67a93b3dd3e59" kindref="member">I2CDEV_MAX_STRETCH_TIME</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ticks<sp/>!=<sp/>t)<sp/>&amp;&amp;<sp/>(res<sp/>=<sp/>i2c_set_timeout(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>ticks))<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Timeout:<sp/>ticks<sp/>=<sp/>%d<sp/>(%d<sp/>usec)<sp/>on<sp/>port<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1ad177c30687f89873cc6a6437f08f7fe0" kindref="member">timeout_ticks</ref><sp/>/<sp/>80,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga9785ee992dab84bea0d7be83bb6e17fc" kindref="member">i2c_dev_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*in_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_size)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev<sp/>||<sp/>!in_data<sp/>||<sp/>!in_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a423c4afe004688f73eebf7426cbfb9eb" kindref="member">SEMAPHORE_TAKE</ref>(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>i2c_setup_port(dev);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_cmd_handle_t<sp/>cmd<sp/>=<sp/>i2c_cmd_link_create();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_data<sp/>&amp;&amp;<sp/>out_size)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_start(cmd);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write_byte(cmd,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref><sp/>&lt;&lt;<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write(cmd,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)out_data,<sp/>out_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_start(cmd);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write_byte(cmd,<sp/>(dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref><sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_read(cmd,<sp/>in_data,<sp/>in_size,<sp/>I2C_MASTER_LAST_NACK);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_stop(cmd);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>i2c_master_cmd_begin(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>cmd,<sp/>pdMS_TO_TICKS(CONFIG_I2CDEV_TIMEOUT));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>read<sp/>from<sp/>device<sp/>[0x%02x<sp/>at<sp/>%d]:<sp/>%d<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>res,<sp/>esp_err_to_name(res));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_cmd_link_delete(cmd);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a28a94ff9b7ccdbfec8e18e66ba103c16" kindref="member">SEMAPHORE_GIVE</ref>(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1ga22856483acc1f539d29e07876fc0418a" kindref="member">i2c_dev_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out_reg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_reg_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_size)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev<sp/>||<sp/>!out_data<sp/>||<sp/>!out_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a423c4afe004688f73eebf7426cbfb9eb" kindref="member">SEMAPHORE_TAKE</ref>(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>i2c_setup_port(dev);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_cmd_handle_t<sp/>cmd<sp/>=<sp/>i2c_cmd_link_create();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_start(cmd);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write_byte(cmd,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref><sp/>&lt;&lt;<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_reg<sp/>&amp;&amp;<sp/>out_reg_size)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write(cmd,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)out_reg,<sp/>out_reg_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_write(cmd,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)out_data,<sp/>out_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_stop(cmd);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>i2c_master_cmd_begin(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>cmd,<sp/>pdMS_TO_TICKS(CONFIG_I2CDEV_TIMEOUT));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="lvgl__helpers_8c_1afc3d101f633a076cc1ca84b85b6224b2" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>write<sp/>to<sp/>device<sp/>[0x%02x<sp/>at<sp/>%d]:<sp/>%d<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a84ad7180602cb8e36b38c29e5b1c86c6" kindref="member">addr</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>,<sp/>res,<sp/>esp_err_to_name(res));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_cmd_link_delete(cmd);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2cdev_8c_1a28a94ff9b7ccdbfec8e18e66ba103c16" kindref="member">SEMAPHORE_GIVE</ref>(dev-&gt;<ref refid="structi2c__dev__t_1a4b469f10acfaf5675d77fbe218c2ebe2" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1gae8b4a6110cdc2d2e47b2214285ce59fc" kindref="member">i2c_dev_read_reg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev,<sp/>uint8_t<sp/>reg,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*in_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_size)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2cdev_1ga9785ee992dab84bea0d7be83bb6e17fc" kindref="member">i2c_dev_read</ref>(dev,<sp/>&amp;reg,<sp/>1,<sp/>in_data,<sp/>in_size);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">esp_err_t<sp/><ref refid="group__i2cdev_1gad9827abf64603201a084148c0de097ec" kindref="member">i2c_dev_write_reg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev__t" kindref="compound">i2c_dev_t</ref><sp/>*dev,<sp/>uint8_t<sp/>reg,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_size)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2cdev_1ga22856483acc1f539d29e07876fc0418a" kindref="member">i2c_dev_write</ref>(dev,<sp/>&amp;reg,<sp/>1,<sp/>out_data,<sp/>out_size);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/i2cdev.c"/>
  </compounddef>
</doxygen>
